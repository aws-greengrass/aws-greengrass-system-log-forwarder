// aws-greengrass-system-log-forwarder - System log uploader for AWS Greengrass
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

#ifndef AWS_SIGV4_H
#define AWS_SIGV4_H

#include "system-log-forwarder.h"
#include <ggl/buffer.h>
#include <ggl/error.h>
#include <ggl/vector.h>
#include <stddef.h>

/// This is the SHA of an empty i.e. "" payload. It is always constant. This
/// MUST be added as the value for the header x-amz-content-sha256.
#define ZERO_PAYLOAD_SHA \
    "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"

typedef struct S3RequiredHeaders {
    // x-amz-security-token
    GglBuffer amz_security_token;
    // x-amz-date
    GglBuffer amz_date;
    // x-amz-content-sha256
    GglBuffer amz_content_sha256;
    // host
    GglBuffer host;
} S3RequiredHeaders;

/// @brief This API provides the current time in UTC in the ISO 8601 format as a
/// NULL terminated string.
/// @param[in|out] buffer The 17 character long user provided buffer in which
/// the current time is encoded. It needs to be 17 bytes long to accommodate the
/// terminating NULL character. The output string will always be 16 bytes long.
/// @param[in] len The length of the provided buffer. It must be greater than or
/// equal to 17.
/// @return The length of the encoded time string without the NULL terminator in
/// case of success. 0 is returned in case of failure.
size_t aws_sigv4_get_iso8601_time(char *buffer, size_t len);

/// @brief This API adds the headers to the user provided vector in a
/// non-canonical format which the AWS sigv4 library understands.
/// @param[in|out] The vector in which the key:value pair is encoded.
/// @param[in] header_key The key of the header.
/// @param[in] header_value The value associated with the header key.
/// @return error code on failure, GGL_ERR_OK on success.
GglError aws_sigv4_add_header_for_signing(
    GglByteVec *vector, GglBuffer header_key, GglBuffer header_value
);

/// @brief This API generates the authorization header to be used in GET HTTP
/// requests to S3.
/// @param[in] filepath is the path of the object that is being downloaded from
/// S3 including the starting '/'
/// @param[in] sigv4_details is the structure containing AWS credentials.
/// @param[in] required_headers is the structure containing the headers which
/// are essential for the HTTP request to S3. Without all these headers the
/// request will be invalid. It is the users responsibility to include these
/// headers in the actual HTTP call as well.
/// @param[in] headers_to_sign is where the headers provided in the
/// required_headers parameter are arranged in a way that the AWS sigv4 library
/// understands. If the application wants additional users to be signed by the
/// Sigv4 library, the application can use the API
/// aws_sigv4_add_header_for_signing and add the headers to the vector BEFORE it
/// is passed to this API.
/// @param[in|out] auth_header is the buffer which should be long enough to
/// accommodate the authorization header generated by this API. The buffer's
/// 'len' field will be updated by the API to reflect the length of the
/// authorization header generated.
/// @return error code on failure, GGL_ERR_OK on success.
GglError aws_sigv4_s3_get_create_header(
    GglBuffer filepath,
    SigV4Details sigv4_details,
    S3RequiredHeaders required_headers,
    GglByteVec *headers_to_sign,
    GglBuffer *auth_header
);

/// @brief This API generates the authorization header for CloudWatch Logs POST
/// requests.
GglError aws_sigv4_cloudwatch_post_header(
    SigV4Details sigv4_details,
    GglBuffer payload,
    GglBuffer date_buf,
    GglBuffer *auth_header
);

#endif
